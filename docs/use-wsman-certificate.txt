-------------------------------------------------------------------------------- -
# Run Setup Winrm in (targets windows)

[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
$url = "https://raw.githubusercontent.com/ansible/ansible/devel/examples/scripts/ConfigureRemotingForAnsible.ps1"
$file = "$env:temp\ConfigureRemotingForAnsible.ps1"

(New-Object -TypeName System.Net.WebClient).DownloadFile($url, $file)

powershell.exe -ExecutionPolicy ByPass -File $file
-------------------------------------------------------------------------------- -


-------------------------------------------------------------------------------- -
# Enable Certificate authentication (targets windows)
Set-Item -Path WSMan:\localhost\Service\Auth\Certificate -Value $true
-------------------------------------------------------------------------------- -

-------------------------------------------------------------------------------- -
# Set reg ClientAuthTrustMode
Set-ItemProperty -Path registry::HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL -Name ClientAuthTrustMode -Type DWord -Value 2
-------------------------------------------------------------------------------- -


-------------------------------------------------------------------------------- -
# Create cert (with openssl daemon in linux server)

#!/bin/bash

#the C locale only conducts a simple bytewise comparison,
#so it will also perform better than the others.
export LANG=C

# Set the name of the local user that will have the key mapped to
USERNAME="vagrant"

#create openssl.conf
cat >openssl.conf <<EOL
distinguished_name = req_distinguished_name
[req_distinguished_name]
[v3_req_client]
extendedKeyUsage = clientAuth
subjectAltName = otherName:1.3.6.1.4.1.311.20.2.3; UTF8:$USERNAME@localhost
EOL

#generate and key
export OPENSSL_CONF=openssl.conf
openssl req -x509 \
-nodes -days 3650 \
-newkey rsa:2048 \
-out cert.pem \
-outform PEM \
-keyout cert_key.pem \
-subj "/CN=$USERNAME" \
-extensions v3_req_client

#remove openssl.conf
rm openssl.conf
-------------------------------------------------------------------------------- -


-------------------------------------------------------------------------------- -
# Copy certificate(targets windows)

Copy file cert.pem to server windows (.ssh folder)
-------------------------------------------------------------------------------- -


-------------------------------------------------------------------------------- -
# Import certificate(targets windows)

$cert = New-Object -TypeName System.Security.Cryptography.X509Certificates.X509Certificate2
$cert.Import("C:\Users\vagrant\.ssh\cert.pem")
$store_name = [System.Security.Cryptography.X509Certificates.StoreName]::Root
$store_location = [System.Security.Cryptography.X509Certificates.StoreLocation]::LocalMachine
$store = New-Object -TypeName System.Security.Cryptography.X509Certificates.X509Store -ArgumentList $store_name, $store_location
$store.Open("MaxAllowed")
$store.Add($cert)
$store.Close()
-------------------------------------------------------------------------------- -


-------------------------------------------------------------------------------- -
# Import client certificate public key(targets windows)

$cert = New-Object -TypeName System.Security.Cryptography.X509Certificates.X509Certificate2
$cert.Import("C:\Users\vagrant\.ssh\cert.pem")

$store_name = [System.Security.Cryptography.X509Certificates.StoreName]::TrustedPeople
$store_location = [System.Security.Cryptography.X509Certificates.StoreLocation]::LocalMachine
$store = New-Object -TypeName System.Security.Cryptography.X509Certificates.X509Store -ArgumentList $store_name, $store_location
$store.Open("MaxAllowed")
$store.Add($cert)
$store.Close()

-------------------------------------------------------------------------------- -


-------------------------------------------------------------------------------- -
# Mapping a Certificate to an Account

$username = "vagrant"
$password = ConvertTo-SecureString -String "vagrant" -AsPlainText -Force
$credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $username, $password

# This is the issuer thumbprint which in the case of a self generated cert
# is the public key thumbprint, additional logic may be required for other
# scenarios
$thumbprint = (Get-ChildItem -Path cert:\LocalMachine\root | Where-Object { $_.Subject -eq "CN=$username" }).Thumbprint

New-Item -Path WSMan:\localhost\ClientCertificate `
    -Subject "$username@localhost" `
    -URI * `
    -Issuer $thumbprint `
    -Credential $credential `
    -Force

-------------------------------------------------------------------------------- -


-------------------------------------------------------------------------------- -
# Set ansible inventory for test

[win]
win2019 ansible_host=192.168.0.136

[win:vars]
ansible_connection=winrm
ansible_winrm_scheme=https
ansible_port=5986
ansible_winrm_transport= certificate
ansible_winrm_cert_pem= /home/vagrant/.ssh/cert.pem
ansible_winrm_cert_key_pem=/home/vagrant/.ssh/cert_key.pem
ansible_winrm_server_cert_validation=ignore
-------------------------------------------------------------------------------- -


-------------------------------------------------------------------------------- -
#Running unit test for validate

ansible -i hosts win2019 -m win_ping -vvv
ansible -i hosts win2019 -m win_whoami -vvv
-------------------------------------------------------------------------------- -

